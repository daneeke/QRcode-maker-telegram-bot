# Copyright 2024 daneeke
# Licensed under the Apache License, Version 2.0 (the "License")


from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, BufferedInputFile

from keyboards.generate_qrcode_keyboard import GenerateQRcodeKeyboard
from keyboards.start_keyboard import StartKeyboard
from utils.escape import aescape
from utils.generate_qrcode import generate_qrcode

_alert = '‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–≤–∞–ª–∏ –≤—ã'

router = Router()


class GeneratingQRcodeState(StatesGroup):
    data = State()


@router.message(GeneratingQRcodeState.data)
async def get_generate_qrcode_data_text_message_handler(message: Message, state: FSMContext):
    qrcode_data = await aescape(message.text)

    if len(qrcode_data) > 1000:
        markup = await GenerateQRcodeKeyboard.markup(user_id=message.from_user.id)
        await message.answer(
            'üö´ –î–ª–∏–Ω–∞ QRcode –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ, —á–µ–º 1000 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n  ‚Äî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
            reply_markup=markup
        )
        return
    
    qrcode = await generate_qrcode(qrcode_data)
    
    markup = await StartKeyboard.markup(user_id=message.from_user.id)
    await message.answer_photo(
        BufferedInputFile(qrcode, 'qrcode.png'),
        'üòä –í–æ—Ç –≤–∞—à QR-code!'
        '\n  ‚Äî –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë',
        reply_markup=markup
    )


@router.callback_query(F.data.startswith(StartKeyboard.button_callback_1))
async def get_generate_callback_query_handler(callback: CallbackQuery, state: FSMContext):
    callback_data = callback.data.split()[1:]
    required_id = int(callback_data[0])

    if callback.from_user.id != required_id:
        await callback.answer(_alert, show_alert=True)
        return
    
    markup = await GenerateQRcodeKeyboard.markup(user_id=required_id)
    await callback.message.answer(
        'ü™Ñ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ QR-code',
        reply_markup=markup
    )
    await state.set_state(GeneratingQRcodeState.data)
    
    await callback.answer()


@router.callback_query(F.data.startswith(GenerateQRcodeKeyboard.button_callback_1))
async def get_cancel_generate_qrcode_callback_query_handler(callback: CallbackQuery, state: FSMContext):
    callback_data = callback.data.split()[1:]
    required_id = int(callback_data[0])

    if callback.from_user.id != required_id:
        await callback.answer(_alert, show_alert=True)
        return
    
    await callback.answer()
    
    current_state = await state.get_state()
    if current_state is None or current_state.split(':')[0] != GeneratingQRcodeState.__name__:
        await callback.message.answer('üö´ –í—ã –Ω–µ –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-code, –ø–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å!')
        return
    
    await state.clear()

    await callback.message.answer(
        '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-code!'
        '\n  ‚Äî –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑'
    )
